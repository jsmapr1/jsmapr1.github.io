<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Npm on </title>
    <link>http://thejoemorgan.com/categories/npm/</link>
    <description>Recent content in Npm on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 26 Aug 2016 15:23:21 +0000</lastBuildDate>
    
	<atom:link href="http://thejoemorgan.com/categories/npm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building an npm Package Part 4: Publishing</title>
      <link>http://thejoemorgan.com/2016/08/26/building-an-npm-package-part-4/</link>
      <pubDate>Fri, 26 Aug 2016 15:23:21 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2016/08/26/building-an-npm-package-part-4/</guid>
      <description>Well, all the hard work is done it&amp;rsquo;s time to deploy.
Fortunately, this is one of the easiest parts of npm. Deploying is a simple process, so I will limit myself to summarizing.
Have An Account Head over to npm and establish a user.
Connect the project to your account with npm login;
Piece of cake. Nothing else to see here.
Update .npmignore This file is for anything you want to ignore when the file is published.</description>
    </item>
    
    <item>
      <title>Building an NPM Package Part 3: Testing Locally</title>
      <link>http://thejoemorgan.com/2016/08/18/building-an-npm-package-part-3-testing-locally/</link>
      <pubDate>Thu, 18 Aug 2016 10:09:11 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2016/08/18/building-an-npm-package-part-3-testing-locally/</guid>
      <description>Testing Locally You have, of course been writing tests the whole time, right? Of course, well even so you need to test it out in another application.
Fortunately, it&amp;rsquo;s very simple using npm link.
First, in your the project directory, run npm link this will create a global symlink.
Then in your test project, run npm link [package name].
In my case, npm link frontend-gitlab.
You can combine these into one step by going to the test project and using a relative path: npm link .</description>
    </item>
    
    <item>
      <title>Building an NPM Package Part 2: Package.json</title>
      <link>http://thejoemorgan.com/2016/07/27/building-an-npm-package-part-2-package-dot-json/</link>
      <pubDate>Wed, 27 Jul 2016 08:16:05 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2016/07/27/building-an-npm-package-part-2-package-dot-json/</guid>
      <description>Anytime I begin to look deeply into an open source project should begin at the package file. The reason I do this is because it gives a starting point for nearly everything and I can easily get a lot of clues about the project from these points.
Most modern web projects have something like a package file. Some languages make this easier than others; the package.json file or composer.json file have scripts and dependencies along with other goodies.</description>
    </item>
    
    <item>
      <title>Building an npm Package: Part 1 Planning</title>
      <link>http://thejoemorgan.com/2016/05/31/building-an-npm-package-part-1/</link>
      <pubDate>Tue, 31 May 2016 16:21:27 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2016/05/31/building-an-npm-package-part-1/</guid>
      <description>NPM Packages At this point, node has become an integral part of web development. Even though most web developers are not node developers, the suite of command line tools built on node is just too good to ignore. And at the core of this suite of tools, is the node package manager, NPM.
I recently have been working a bit with gitlab through a project at work and decided to write a small api wrapper as a node project.</description>
    </item>
    
  </channel>
</rss>