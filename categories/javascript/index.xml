<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on </title>
    <link>http://thejoemorgan.com/categories/javascript/</link>
    <description>Recent content in Javascript on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 02 Aug 2017 08:25:08 +0000</lastBuildDate>
    
	<atom:link href="http://thejoemorgan.com/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unbreakable: The Craft of Code</title>
      <link>http://thejoemorgan.com/2017/08/02/unbreakable-the-craft-of-code/</link>
      <pubDate>Wed, 02 Aug 2017 08:25:08 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2017/08/02/unbreakable-the-craft-of-code/</guid>
      <description>Slides from KCDC   Unbreakable: The Craft of Code  from Joe Morgan</description>
    </item>
    
    <item>
      <title>JavaScript Generators: A Practical Example</title>
      <link>http://thejoemorgan.com/2017/01/17/javascript-generators-a-practical-example/</link>
      <pubDate>Tue, 17 Jan 2017 07:51:58 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2017/01/17/javascript-generators-a-practical-example/</guid>
      <description>Generators: Who Cares Generators may be the most misunderstood feature of ES6. Personally, I&amp;rsquo;ve read at least half a dozen articles purporting to explain them and all I can ever think is &amp;ldquo;but why would I use them?&amp;rdquo;
Turns out I&amp;rsquo;m not alone. No one uses them.
However, that doesn&amp;rsquo;t mean they don&amp;rsquo;t matter. It&amp;rsquo;s possible that soon we will love them and use them all the time. We just need to understand the problem they solve and see how they add value.</description>
    </item>
    
    <item>
      <title>ES6 Patterns in the Wild</title>
      <link>http://thejoemorgan.com/2017/01/12/es6-patterns-in-the-wild/</link>
      <pubDate>Thu, 12 Jan 2017 14:11:07 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2017/01/12/es6-patterns-in-the-wild/</guid>
      <description>Slides from CodeMash. It was a lot of fun despite the room malfunction. Thanks to all who attended.
  Es6 patterns in the wild  from Joe Morgan</description>
    </item>
    
    <item>
      <title>testing apis in Angular 2 with MockBackend</title>
      <link>http://thejoemorgan.com/2016/11/21/testing-apis-in-angular-2/</link>
      <pubDate>Mon, 21 Nov 2016 11:44:03 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2016/11/21/testing-apis-in-angular-2/</guid>
      <description>Ok, ok. I know Angular 2 is still fairly new, but working with it has been&amp;hellip; an experience. There&amp;rsquo;s so much information that is out of date or just plain wrong. And that is doubly true of testing. No matter how important every claims testing is to modern development, it always lags behind.
Recent case in point, I was out interviewing for new jobs and after a few places gave me a spiel about how their developers are geniuses (aren&amp;rsquo;t they always) and how their products are amazing (ditto), I asked what testing suite they used.</description>
    </item>
    
    <item>
      <title>react animations</title>
      <link>http://thejoemorgan.com/2016/09/23/react-animations/</link>
      <pubDate>Fri, 23 Sep 2016 08:15:14 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2016/09/23/react-animations/</guid>
      <description>Previously, I wrote about React animations for creating a dropdown menu, but after spending more and more time working with them, I decided to explore exactly how animations fit into the React lifecycle.
Two Animations There are two kinds of component animations in React.
 The component is already in the DOM The component is entering the DOM  The first kind are not that hard to deal with. In the past, I&amp;rsquo;ve added a CSS class to trigger a transition.</description>
    </item>
    
    <item>
      <title>Building an npm Package Part 4: Publishing</title>
      <link>http://thejoemorgan.com/2016/08/26/building-an-npm-package-part-4/</link>
      <pubDate>Fri, 26 Aug 2016 15:23:21 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2016/08/26/building-an-npm-package-part-4/</guid>
      <description>Well, all the hard work is done it&amp;rsquo;s time to deploy.
Fortunately, this is one of the easiest parts of npm. Deploying is a simple process, so I will limit myself to summarizing.
Have An Account Head over to npm and establish a user.
Connect the project to your account with npm login;
Piece of cake. Nothing else to see here.
Update .npmignore This file is for anything you want to ignore when the file is published.</description>
    </item>
    
    <item>
      <title>Building an NPM Package Part 2: Package.json</title>
      <link>http://thejoemorgan.com/2016/07/27/building-an-npm-package-part-2-package-dot-json/</link>
      <pubDate>Wed, 27 Jul 2016 08:16:05 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2016/07/27/building-an-npm-package-part-2-package-dot-json/</guid>
      <description>Anytime I begin to look deeply into an open source project should begin at the package file. The reason I do this is because it gives a starting point for nearly everything and I can easily get a lot of clues about the project from these points.
Most modern web projects have something like a package file. Some languages make this easier than others; the package.json file or composer.json file have scripts and dependencies along with other goodies.</description>
    </item>
    
    <item>
      <title>Using Sinon to Test Document Functions</title>
      <link>http://thejoemorgan.com/2016/07/05/using-sinon-to-test-document-functions/</link>
      <pubDate>Tue, 05 Jul 2016 16:11:45 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2016/07/05/using-sinon-to-test-document-functions/</guid>
      <description>That Sweet, Sweet Code Coverage On my most recent React project, I&amp;rsquo;ve really been trying to get that 100% code coverage. It hasn&amp;rsquo;t been bad for the most part, but I hit a wall when a few functions needed to query the DOM.
For the most part, I isolated the DOM as much as possible and as a result most functions were very easy to test. Still, I got to the point that the functionality required knowing exactly where elements were on the page.</description>
    </item>
    
    <item>
      <title>Building an npm Package: Part 1 Planning</title>
      <link>http://thejoemorgan.com/2016/05/31/building-an-npm-package-part-1/</link>
      <pubDate>Tue, 31 May 2016 16:21:27 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2016/05/31/building-an-npm-package-part-1/</guid>
      <description>NPM Packages At this point, node has become an integral part of web development. Even though most web developers are not node developers, the suite of command line tools built on node is just too good to ignore. And at the core of this suite of tools, is the node package manager, NPM.
I recently have been working a bit with gitlab through a project at work and decided to write a small api wrapper as a node project.</description>
    </item>
    
    <item>
      <title>testing apis with nock</title>
      <link>http://thejoemorgan.com/2016/05/18/testing-apis-with-nock/</link>
      <pubDate>Wed, 18 May 2016 09:27:41 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2016/05/18/testing-apis-with-nock/</guid>
      <description>I recently wrote about how to use json-server to mock api calls when writing web apps. And that is very useful when you want write code and not have to worry about latency or api limits. However, it is still an extra dependency and may not make sense in all projects.
Testing needs to be self contained and have minimal external dependencies (for now, I will just talk about unit testing).</description>
    </item>
    
    <item>
      <title>That Feeling of Beautiful Code</title>
      <link>http://thejoemorgan.com/2016/04/08/that-feeling-of-beautiful-code/</link>
      <pubDate>Fri, 08 Apr 2016 16:08:19 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2016/04/08/that-feeling-of-beautiful-code/</guid>
      <description>Here&amp;rsquo;s a trivial post, but a great example of why I like writing code.
I consider myself an aesthetic programmer. I want my code to be visibly appealing and I will sometimes write code in a certain way just because I think it looks better.
Every now and then I write something and I enjoy what I&amp;rsquo;ve written so much that I just sit and savor the moment. Here&amp;rsquo;s what brought on that feeling today.</description>
    </item>
    
    <item>
      <title>Mocking Apis Locally with webpack and json-server</title>
      <link>http://thejoemorgan.com/2016/04/07/mocking-apis-locally-with-webpack-dot-environmentplugin-and-json-server/</link>
      <pubDate>Thu, 07 Apr 2016 16:00:37 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2016/04/07/mocking-apis-locally-with-webpack-dot-environmentplugin-and-json-server/</guid>
      <description>I always love the beginning of a new project. It&amp;rsquo;s a great time to rethink a few basic fundamentals and to improve the overall development experience.
On my most recent project, I decided to give webpack a try. I&amp;rsquo;ve thought about using webpack before, but never pulled the trigger until one blogger deemed it the &amp;lsquo;winner&amp;rsquo; of dependency management I decided. Why not. Let&amp;rsquo;s give it a go.
I&amp;rsquo;m not fully converted quite yet, but I did run into an interesting use case today.</description>
    </item>
    
    <item>
      <title>Creating A Dropdown Menu in React</title>
      <link>http://thejoemorgan.com/2016/01/05/creating-a-dropdown-menu-in-react/</link>
      <pubDate>Tue, 05 Jan 2016 08:14:24 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2016/01/05/creating-a-dropdown-menu-in-react/</guid>
      <description>Here&amp;rsquo;s a quick guide to creating a dropdown menu with React native components.
Just want code? Here&amp;rsquo;s a demo: See the Pen React CSSTransitionGroup DropDown Menu by Joe Morgan (@jsmapr1) on CodePen.

React provides a simple component for adding animations to items. It can do a few things, but in short, it works with CSS3 transitions by adding classes for a short amount of time to allow the transition to take affect.</description>
    </item>
    
    <item>
      <title>Building Production Ready React</title>
      <link>http://thejoemorgan.com/2015/12/02/building-production-ready-react/</link>
      <pubDate>Wed, 02 Dec 2015 16:28:24 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2015/12/02/building-production-ready-react/</guid>
      <description>##Production Ready React React is still an evolving project. Add to that complications of needing to transpile any javascript with ES6 syntax and you have best practices that are, at best, a moving target. After running into a few issues, I wanted to get all the information I have together in one accessible place.
Here are my goals for the current project:
 Write code in ES6 syntax (but compiled so that it can be cross-browser compatible) Make production code as small as possible including all dependencies Make the project easy to deploy and hand off to other developers  This list seemed fairly simple, but there were a few surprises that I did not anticipate.</description>
    </item>
    
    <item>
      <title>React Component 3 ways</title>
      <link>http://thejoemorgan.com/2015/11/16/react-component-3-ways/</link>
      <pubDate>Mon, 16 Nov 2015 15:50:52 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2015/11/16/react-component-3-ways/</guid>
      <description>React Components 3 ways I&amp;rsquo;ve been building a small react app as part of a larger project. I&amp;rsquo;ve also recently been trying to create a culture of pull requests and code reviews in the team. A few people are interested. Most aren&amp;rsquo;t. However, for the few that have been interested, I&amp;rsquo;ve faced an interesting challenge. Nearly no one is a javascript developer.
Sure, they&amp;rsquo;ve written some jquery here and added a plugin there, but no one has really taken the time to learn about the language.</description>
    </item>
    
    <item>
      <title>Creating Scrolling Self-Drawing Lines</title>
      <link>http://thejoemorgan.com/2015/09/03/creating-scrolling-self-drawing-lines/</link>
      <pubDate>Thu, 03 Sep 2015 16:49:04 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2015/09/03/creating-scrolling-self-drawing-lines/</guid>
      <description>First of all here&amp;rsquo;s a demo. Scroll inside the codepen to view: See the Pen QjNbgz by Joe Morgan (@jsmapr1) on CodePen.

My office recently designed a campaign to encourage student applications as a deadline neared. Our goal was to create a very unique and engaging page for potential students and the designers settled on a theme of motion and inertia. Translating that into an experience on the web was a little more difficult.</description>
    </item>
    
    <item>
      <title>Refactoring $scope from Angular Projects</title>
      <link>http://thejoemorgan.com/2015/03/19/refactoring-scope-from-angular-projects/</link>
      <pubDate>Thu, 19 Mar 2015 11:52:43 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2015/03/19/refactoring-scope-from-angular-projects/</guid>
      <description>I&amp;rsquo;ve recently become convinced that Angular code can be significantly improved by eliminating the use of $scope and ng-controller. I started exploring this after a few coders I respect banned ng-controller from their own code. I&amp;rsquo;ve found the process to be very helpful for a few reasons. First, it will make the inevitable transition to Angular2 easier as they get rid of both ng-controller and $scope, but, even more importantly, it makes better code right now.</description>
    </item>
    
    <item>
      <title>Testing Angular UI Modals</title>
      <link>http://thejoemorgan.com/2015/02/20/testing-angular-ui/</link>
      <pubDate>Fri, 20 Feb 2015 11:07:53 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2015/02/20/testing-angular-ui/</guid>
      <description>I recently ran into an issue while testing an modal using Angular UI Bootstrap. My goal was to create a directive that will trigger a modal to open when clicked. The directive code is relatively simple:
app.directive(&#39;modalTrigger&#39;, [&#39;$modal&#39;, &#39;sharedData&#39;, function($modal, sharedData) { return { scope : { submitUrl : &#39;@&#39; }, link: function(scope, elem, attributes) { elem.bind(&#39;click&#39;, function() { $modal.open({ template: &amp;quot;&amp;lt;div another-directive&amp;gt;&amp;lt;/div&amp;gt;&amp;quot;, controller: &#39;AwesomeController as ac&#39;, resolve : { submitUrl : function() { return scope.</description>
    </item>
    
    <item>
      <title>Protractor in Iframe</title>
      <link>http://thejoemorgan.com/2015/01/08/protractor-in-iframe/</link>
      <pubDate>Thu, 08 Jan 2015 15:12:10 +0000</pubDate>
      
      <guid>http://thejoemorgan.com/2015/01/08/protractor-in-iframe/</guid>
      <description>#Working With Iframes in Protractor One of the hardest parts of legacy system is finding the confidence to refactor code. It&amp;rsquo;s not a matter of if one will have to refactor code, but rather the question is when and how much.
If you happen to be lucky enough to inherit a well documented and well tested system, then good for you. If only we were all so lucky. Most of us inherit systems that are not so easy, but again, the need to refactor will present itself eventually.</description>
    </item>
    
  </channel>
</rss>